#!/usr/bin/env python3

import socket
import ssl
import argparse
import sys

COURSE = 'cs5700spring2023'

HELLO_MSG = 'HELLO'
EVAL_MSG = 'EVAL'
STATUS_MSG = 'STATUS'
ERROR_MSG = 'ERR'
BYE_MSG = 'BYE'

ERR_MSG = '#DIV/0'

MAX_LENGTH = 16384

ENCODING = 'utf-8'

global evalMessage

def check_operator(exp):
    """
    Check if the given expression is an operator.
    Args: 
        exp: The expression to check
    Returns: 
        True if the expression is an operator, False otherwise
    """
    return (exp == '+' or exp == '-' or exp == '*' or exp == '//' or exp == '<<^')


def get_message(socket):
    """
    Receive a message from the server.
    Args:
        socket: The socket connection to receive data from
    Returns: 
        The received message as a string
    """
    full_packet = ""
    while True:
        incoming_packet = socket.recv(MAX_LENGTH).decode(ENCODING)
        full_packet += incoming_packet
        if "\n" in full_packet:
            break

    return full_packet


def calculate_result(expression):
    """
    Evaluate the given expression and return the result.
    Args:
        expression: The expression to evaluate
    Returns: 
        The result of the evaluation and a flag indicating if there was an error
    """

    if (len(expression) == 0):
        return 0
    
    # FLAG variable to detect error in evaluation
    error_found = False
    operands = []
    operators = []

    for exp in expression:
        if (exp == '(' or check_operator(exp)):
            operators.append(exp)
            
        elif (exp == ')'):
            while (len(operators) != 0 and operators[-1] != '('):
                val2 = operands.pop()
                val1 = operands.pop()
                op = operators.pop()

                result, error_found = evaluation(val1, val2, op)
                if error_found: return result, error_found
                operands.append(result)
                operators.pop()
            
        elif (exp.lstrip('-').isdigit()):
            operands.append(int(exp))

    return operands[-1], error_found


def evaluation(val1, val2, op):
    """
    Perform a single operation on two values.
    Args:
        val1: The first value
        val2: The second value
        op: The operator to apply
    Returns: 
        The result of the operation and a flag indicating if there was an error
    """
    error_found = False
    result = 0

    try:
        if (op == '+'): result = val1 + val2
        
        elif (op == '-'): result = val1 - val2

        elif (op == '*'): result = val1 * val2
        
        elif (op == '//'): result = val1 // val2
        
        elif (op == '<<^'): result = (val1 << 13) ^ val2

    except:
        # DivBy0 error
        error_found = True
        
    return result, error_found


def valid_expression(message, flag):
    """
    Check if the given message is a valid expression.
    Args:
        message: The message to check
        flag: The expected flag in the message
    Returns: 
        True if the message is valid, False otherwise
    """

    if (len(message) == 0 or len(flag) == 0): 
        return False
    
    exp = message.split()
    if (len(exp) < 2 or not (exp[0] == COURSE)):
        return False
    
    if flag == EVAL_MSG:
        return (exp[1] == EVAL_MSG)
    
    return (exp[1] == BYE_MSG)


def close_connection(socket):
    """
    Close the given socket connection.
    Args:
        socket: The socket connection to close
    """
    socket.close()


def main(hostname, port, username):
    """
    Main function that handles the client-server communication.
    Args:
        hostname: The server's hostname
        port: The server's port number
        username: The user's Northeastern username
    """

    try:
        # Set up Socket
        client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Wrap Socket in SSL format, based on script input
        context = ssl.SSLContext(ssl.PROTOCOL_TLS)
        # Set up Handshake to establish security attributes (cipher suite) and, a valid session to read/write application data
        ssl_sock = context.wrap_socket(client_sock)
        addr = hostname, port
        ssl_sock.connect(addr)
    except:
        # Can't connect with socket
        close_connection(ssl_sock)
        sys.exit("Cannot connect to the server!" + "\n")

    # Send HELLO message to the server
    try: 
        hello_msg = COURSE + " " + HELLO_MSG + " " + username + "\n"
        ssl_sock.send(hello_msg.encode(ENCODING))
    except:
        # IO Exception with socket stream
        close_connection()
        sys.exit("IO Exception with socket stream" + "\n")

    # Receive EVAL messages from the server and send the evaluation as output
    eval_msg = get_message(ssl_sock)

    while ((EVAL_MSG in eval_msg) and valid_expression(eval_msg, EVAL_MSG)):
        has_error = False
        expression = eval_msg.split()
        range = expression[2 :]
        result, has_error = calculate_result(range)

        # If error is found, send ERR message to server
        if has_error:
            errorMessage = COURSE + " " + ERROR_MSG + " " + ERR_MSG + "\n"
            ssl_sock.send(errorMessage.encode(ENCODING))
            # Reset error
            has_error = False

        # Send STATUS message with the evaluation result
        else:
            status_msg = COURSE + " " + STATUS_MSG + " " + str(result) + "\n"
            ssl_sock.send(status_msg.encode(ENCODING))

        # Read next EVAL messages
        eval_msg = get_message(ssl_sock)

    # In case no more EVAL messages received, BYE message has been received
    if ((BYE_MSG in eval_msg) and valid_expression(eval_msg, BYE_MSG)):
        # Extract secret flag and print it
        secret_flag = eval_msg.split()[2]
        print(secret_flag)

    # Invalid expression received - close stream
    elif (not valid_expression(eval_msg, "")):
        pass

    close_connection(ssl_sock)


if __name__ == "__main__":
    """ 
    Script argument parser 
    """

    parser = argparse.ArgumentParser('Project 1: Simple Client')

    # Port Number: Optional argument
    parser.add_argument('-p', action='store', type=int, default=27995, dest='PORT', help='<-p port>')
    # SSL, Hostname and Northeastern-username: Mandatory
    parser.add_argument('-s', action='store_true', dest='SSL', required=True, help='<-s>')
    parser.add_argument('HOST', action='store', type=str, help='[hostname]')
    parser.add_argument('NEU_USERNAME', action='store', type=str, help='[Northeastern-username]')

    args = parser.parse_args()
    # Pass args to main() method
    main(args.HOST, args.PORT, args.NEU_USERNAME)